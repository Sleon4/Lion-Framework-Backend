<!DOCTYPE html>
<html>
<head>
    <title>Console Web Â· Lion-Framework</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    {# assets #}
    <link rel="stylesheet" type="text/css" href="{{ host }}/app/assets/index.css">
    {# bootstrap 5.3 #}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="
    sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
</head>
<body class="bg-dark-web">
    {% include 'extends/content.twig' %}

    {# axios #}
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    {# bootstrap 5.3 #}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
    {# assets #}
    <script type="text/javascript">
        const command_list = {
            "available-commands": ["info", "test"],
            aes: ["new"],
            db: ["all-capsules", "all-crud", "all-rules", "capsule", "columns", "crud", "factory", "rules", "seed", "select", "show"],
            email: ["show"],
            migrate: ["fresh", "generate", "new"],
            new: ["capsule", "command", "controller", "enum", "interface", "middleware", "model", "rule", "test", "trait"],
            resource: ["new", "serve"],
            route: ["list", "postman"],
            rsa: ["new"],
            sh: ["new"],
            socket: ["new", "serve"],
            token: ["jwt"]
        };

        const addOptions = (options) => {
            const commands = document.getElementById("option");
            commands.innerHTML = "";

            options.forEach((option, index) => {
                const op = document.createElement("OPTION");
                op.value = option;
                op.textContent = option;
                commands.appendChild(op);
            });
        };

        addOptions(command_list[document.getElementById("group").value]);

        document.getElementById("group").addEventListener("change", (e) => {
            addOptions(command_list[e.target.value]);
        });

        document.getElementById("form-commands").addEventListener("submit", (e) => {
            e.preventDefault();
            const command = document.getElementById("command");
            const group = document.getElementById("group");
            const content = document.getElementById("content");
            const option = document.getElementById("option");

            const form = new FormData();
            form.append("command", command.value);
            form.append("group", group.value);
            form.append("option", option.value);

            axios.post("{{ host }}/http.php", form, {
                headers: {
                    "content-Type": "multipart/form-data"
                }
            }).then(res => {
                // console.log(res.data);
                command.value = "";
                content.value = content.value === "" ? (res.data.join("\n")) : (content.value + "\n" + res.data.join("\n"));
            });
        });
    </script>
</body>
</html>
